// Code generated by hertz generator.

package handler

import (
	"context"
	"fmt"
	"go_tiktok_project/common"
	"go_tiktok_project/service"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/cloudwego/hertz/cmd/hz/util/logs"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// 生成pb会显示有冲突，就在这里构造了结构体
type douyin_publish_list_response struct {
	Status_code int32           `protobuf:"varint,1,req,name=status_code" json:"status_code"`              // 状态码，0-成功，其他值-失败
	Status_msg  string          `protobuf:"bytes,2,opt,name=status_msg,json=status_msg" json:"status_msg"` // 返回状态描述
	Video_list  []service.Video `protobuf:"varint,3,req,name=video_list" json:"video_list"`                // 用户发布的视频列表
}

// 获得发布列表
func GetUserVideo(ctx context.Context, c *app.RequestContext) {
	path := c.Request.Path()
	logs.Info("req path: %s", path)

	//token鉴权
	token := c.Query("token")
	// token_id, _ := strconv.ParseInt(token, 10, 64)
	// token1, _ := service.GenerateToken(uint64(token_id), "222")
	token_userID, err := common.Token2UserID(token)
	token_user_id := int64(token_userID)
	if err != nil {
		logs.Errorf("鉴权token错误, error: " + err.Error())
		c.JSON(http.StatusBadRequest, douyin_publish_list_response{
			Status_code: common.TokenFailed,
			Status_msg:  common.TokenFailedMsg,
			Video_list:  nil,
		})
		return
	}

	user := c.Query("user_id")
	video_user_id, err := strconv.ParseInt(user, 10, 64)
	if err != nil {
		logs.Errorf("转换user_id为int失败, error: " + err.Error())
		c.JSON(http.StatusBadRequest, douyin_publish_list_response{
			Status_code: common.GetUserVideoFailed,
			Status_msg:  common.GetUserVideoFailedMsg,
			Video_list:  nil,
		})
		return
	}

	logs.Info("token_user_id: %s", token_user_id)

	//获取用户发布列表
	video_list, err := service.GetUserVideo(video_user_id, token_user_id)
	if err != nil {
		logs.Errorf("service err, error: " + err.Error())
		c.JSON(400, douyin_publish_list_response{
			Status_code: common.GetUserVideoFailed,
			Status_msg:  common.GetUserVideoFailedMsg,
			Video_list:  nil,
		})
		return
	}

	resp := &douyin_publish_list_response{
		Status_code: common.GetUserVideoSuccess,
		Status_msg:  common.GetUserVideoSuccessMsg,
		Video_list:  video_list,
	}
	c.JSON(consts.StatusOK, resp)
}

// 用户视频投稿
func PostUserVideo(ctx context.Context, c *app.RequestContext) {
	path := c.Request.Path()
	logs.Info("req path: %s", string(path))

	//token鉴权
	token, _ := c.GetPostForm("token") // 认为是user_id
	// token_id, _ := strconv.ParseInt(token, 10, 64)
	// token1, _ := service.GenerateToken(uint64(token_id), "222")
	token_userID, err := common.Token2UserID(token)
	user_id := int64(token_userID)
	if err != nil {
		logs.Errorf("鉴权token错误, err: %v", err)
		c.JSON(400, utils.H{
			"status_code": common.TokenFailed,
			"status_msg":  common.TokenFailedMsg,
		})
		return
	}
	logs.Info("user_id: %s", user_id)

	title, _ := c.GetPostForm("title")
	data, err := c.FormFile("data")
	if err != nil {
		panic(err)
	}

	//利用文件名获得文件信息和文件路径
	filename := filepath.Base(data.Filename)
	fileInfo := strings.Split(filename, ".")
	filedir := fileInfo[0]
	filedata := fmt.Sprintf("uesr:%d  video:%s", user_id, filename)
	filedir = fmt.Sprintf("./video_data/%s/%s", token, filedir)
	logs.Info("file: %s", data.Filename)
	logs.Info("filedir: %s", filedir)

	//创建存储文件夹
	_, erByStat := os.Stat(filedir)
	if erByStat != nil {
		logs.Errorf("os stat %s error......%v", filedir, erByStat)
	}
	//该判断主要是部分文件权限问题导致os.Stat()出错,具体看业务启用
	//使用os.IsNotExist()判断为true,说明文件夹不存在
	if os.IsNotExist(erByStat) {
		logs.Info("%s is not exist", erByStat.Error())
		err := os.MkdirAll(filedir, 0777)
		if err != nil {
			logs.Error("创建文件夹错误 , err: %v", err)
			c.JSON(400, utils.H{
				"status_code": common.PublishFailed,
				"status_msg":  common.PublishFailedMsg,
			})
			return
		} else {
			logs.Info("Create dir %s success!", filedir)
		}
	}

	//保存视频文件
	saveFile := filepath.Join(filedir, filename)
	logs.Info("filepath: %s", saveFile)
	if err := c.SaveUploadedFile(data, saveFile); err != nil {
		logs.Error("保存视频失败, err: %v", err)
		c.JSON(400, utils.H{
			"status_code": common.PublishFailed,
			"status_msg":  common.PublishFailedMsg,
		})
		return
	}

	//service 保存视频数据到数据库
	err = service.PostUserVideo(user_id, title, saveFile, filedata)
	if err != nil {
		logs.Error("server error, err: %v", err)
		c.JSON(400, utils.H{
			"status_code": common.PublishFailed,
			"status_msg":  common.PublishFailedMsg,
		})
		return
	}

	//返回参数
	c.JSON(consts.StatusOK, utils.H{
		"status_code": common.PublishSuccess,
		"status_msg":  common.PublishSuccessMsg,
	})
}
